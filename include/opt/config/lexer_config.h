// *************************************************************************
// operators.h
// System Programming, part2: Programming language translator implementation
// Created by Porubaimikh Oleksandr on 9/25/2023
// *************************************************************************

#ifndef OPT_LEXER_CONFIG_H
#define OPT_LEXER_CONFIG_H

#include <stdint.h>


/**
 * Defines an enumeration of character types for lexical analyzation
 */
typedef enum {
  CHAR_a,
  CHAR_d,
  CHAR_e,
  CHAR_f,
  CHAR_g,
  CHAR_h,
  CHAR_i,
  CHAR_l,
  CHAR_n,
  CHAR_o,
  CHAR_p,
  CHAR_r,
  CHAR_s,
  CHAR_t,
  CHAR_u,
  CHAR_w,
  CHAR_x,
  CHAR__,
  CHAR_EXCLAMATION_MARK,
  CHAR_QUOTE,
  CHAR_ASTERISK,
  CHAR_PARENTHESES_OPEN,
  CHAR_PARENTHESES_CLOSED,
  CHAR_MINUS,
  CHAR_PLUS,
  CHAR_EQUALS,
  CHAR_SLASH,
  CHAR_PERCENT,
  CHAR_LESS,
  CHAR_GREATER,
  CHAR_PERIOD,
  CHAR_AMPERSAND,
  CHAR_PIPE,
  CHAR_SEMICOLON,
  CHAR_ALPHABETIC,
  CHAR_DIGIT,
  CHAR_WHITESPACE,
  CHAR_EOF,
  CHAR_LENGTH_
} lexer_characters_t;

/**
 * Defines a transition table for lexical analyzer
 */
const uint16_t LEXER_TABLE[][CHAR_LENGTH_] = {
//        a    d    e    f    g    h    i    l    n    o    p    r    s    t    u    w    x    _    !    "'   *    (    )    -    +    =    /    %    <    >    .    &    |    ;    ALP  DIG  WHS  EOF
#define TMP 0
/* 0  */{ 1,   3,   6,   11,  15,  1,   20,  1,   39,  1,   1,   23,  1,   30,  33,  44,  1,   1,   TMP, TMP, TMP, TMP, TMP, TMP, TMP, TMP, TMP, TMP, TMP, TMP, TMP, TMP, TMP, TMP, 1,   TMP, TMP, 0   }, // start
#undef  TMP
//////// READING AN IDENTIFIER
/* 1  */{ 1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   5,   1,   1,   2,   2   }, // letter
/* 2  */{ 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0   }, // TERMINATING

//////// READING DO OPERATOR
/* 3  */{ 1,   1,   1,   1,   1,   1,   1,   1,   1,   4,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,   1,   2,   2   }, // d
/* 4  */{ 1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   1,   1,   5,   5   }, // o
/* 5  */{ 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0   }, // TERMINATING

//////// READING ELSE OPERATOR
/* 6  */{ 1,   1,   1,   1,   1,   1,   1,   7,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,   1,   2,   2   }, // e
/* 7  */{ 1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   8,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,   1,   2,   2   }, // l
/* 8  */{ 1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,   1,   2,   2   }, // s
/* 9  */{ 1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  1,   1,   10,  10  }, // e
/* 10 */{ 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0   }, // TERMINATING

//////// READING FOR OPERATOR
/* 11 */{ 1,   1,   1,   1,   1,   1,   1,   1,   1,   12,  1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,   1,   2,   2   }, // f
/* 12 */{ 1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   13,  1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,   1,   2,   2   }, // o
/* 13 */{ 1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  1,   1,   14,  14  }, // r
/* 14 */{ 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0   }, // TERMINATING

//////// READING GOTO OPERATOR
/* 15 */{ 1,   1,   1,   1,   1,   1,   1,   1,   1,   16,  1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,   1,   2,   2   }, // g
/* 16 */{ 1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   17,  1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,   1,   2,   2   }, // o
/* 17 */{ 1,   1,   1,   1,   1,   1,   1,   1,   1,   18,  1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,   1,   2,   2   }, // t
/* 18 */{ 1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  1,   1,   19,  19  }, // o
/* 19 */{ 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0   }, // TERMINATING

//////// READING IF OPERATOR
/* 20 */{ 1,   1,   1,   21,  1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,   1,   2,   2   }, // i
/* 21 */{ 1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  1,   1,   22,  22  }, // f
/* 22 */{ 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0   }, // TERMINATING

//////// READING REPEAT OPERATOR
/* 23 */{ 1,   1,   24,  1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,   1,   2,   2   }, // r
/* 26 */{ 27,  1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,   1,   2,   2   }, // e
/* 25 */{ 1,   1,   26,  1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,   1,   2,   2   }, // p
/* 24 */{ 1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   25,  1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,   1,   2,   2   }, // e
/* 27 */{ 1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   28,  1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,   1,   2,   2   }, // a
/* 28 */{ 1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  1,   1,   29,  29  }, // t
/* 29 */{ 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0   }, // TERMINATING

//////// READING TO OPERATOR
/* 30 */{ 1,   1,   1,   1,   1,   50,  1,   1,   1,   31,  1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,   1,   2,   2   }, // t
/* 31 */{ 1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  1,   1,   32,  32  }, // o
/* 32 */{ 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0   }, // TERMINATING

//////// READING UNTIL OPERATOR
/* 33 */{ 1,   1,   1,   1,   1,   1,   1,   1,   34,  1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,   1,   2,   2   }, // u
/* 34 */{ 1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   35,  1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,   1,   2,   2   }, // n
/* 35 */{ 1,   1,   1,   1,   1,   1,   36,  1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,   1,   2,   2   }, // t
/* 36 */{ 1,   1,   1,   1,   1,   1,   1,   37,  1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,   1,   2,   2   }, // i
/* 37 */{ 1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  1,   1,   38,  38  }, // l
/* 38 */{ 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0   }, // TERMINATING

//////// READING NEXT OPERATOR
/* 39 */{ 1,   1,   40,  1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,   1,   2,   2   }, // n
/* 40 */{ 1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   41,  1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,   1,   2,   2   }, // e
/* 41 */{ 1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   42,  1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,   1,   2,   2   }, // x
/* 42 */{ 1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  1,   1,   43,  43  }, // t
/* 43 */{ 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0   }, // TERMINATING

//////// READING WHILE OPERATOR
/* 44 */{ 1,   1,   1,   1,   1,   45,  1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,   1,   2,   2   }, // w
/* 45 */{ 1,   1,   1,   1,   1,   1,   46,  1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,   1,   2,   2   }, // h
/* 46 */{ 1,   1,   1,   1,   1,   1,   1,   47,  1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,   1,   2,   2   }, // i
/* 47 */{ 1,   1,   48,  1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,   1,   2,   2   }, // l
/* 48 */{ 1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   49,  49,  49,  49,  49,  49,  49,  49,  49,  49,  49,  49,  49,  49,  49,  49,  1,   1,   49,  49  }, // e
/* 49 */{ 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0   }, // TERMINATING

//////// READING THEN OPERATOR
/* 50 */{ 1,   1,   51,  1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,   1,   2,   2   }, // h
/* 51 */{ 1,   1,   1,   1,   1,   1,   1,   1,   52,  1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   1,   1,   2,   2   }, // e
/* 52 */{ 1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  1,   1,   53,  53  }, // n
/* 53 */{ 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0   }, // TERMINATING
};

typedef enum {
  TSTATE_IDENTIFIER = 2,
  TSTATE_DO = 5,
  TSTATE_ELSE = 10,
  TSTATE_GOTO = 19,
  TSTATE_IF = 22,
  TSTATE_REPEAT = 29,
  TSTATE_TO = 32,
  TSTATE_UNTIL = 38,
  TSTATE_NEXT = 43,
  TSTATE_WHILE = 49,
  TSTATE_THEN = 53,
} terminating_states_t;

#endif //OPT_LEXER_CONFIG_H
